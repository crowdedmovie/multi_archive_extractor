# Form implementation generated from reading ui file 'gui_interface.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_Main(object):
    def setupUi(self, Main):
        Main.setObjectName("Main")
        Main.resize(800, 600)

        # Create main layout
        self.centralwidget = QtWidgets.QWidget(parent=Main)
        self.centralwidget.setObjectName("centralwidget")
        Main.setCentralWidget(self.centralwidget)

        # Create main vertical layout for the central widget
        self.mainLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.mainLayout.setContentsMargins(20, 20, 20, 20)
        self.mainLayout.setSpacing(15)

        # Paths section
        self.pathsGroup = QtWidgets.QGroupBox("File Locations")
        self.pathsGroup.setObjectName("pathsGroup")
        self.pathsLayout = QtWidgets.QVBoxLayout(self.pathsGroup)
        self.pathsLayout.setSpacing(10)

        # Source folder
        self.hlayoutSource = QtWidgets.QHBoxLayout()
        self.lblSourceFolder = QtWidgets.QLabel("Source Folder:")
        self.lblSourceFolder.setMinimumWidth(100)
        self.txtSourceFolder = QtWidgets.QLineEdit()
        self.btnSelectSource = QtWidgets.QPushButton()
        self.btnSelectSource.setIcon(QtGui.QIcon.fromTheme("folder-open"))
        self.btnSelectSource.setFixedWidth(40)
        self.hlayoutSource.addWidget(self.lblSourceFolder)
        self.hlayoutSource.addWidget(self.txtSourceFolder)
        self.hlayoutSource.addWidget(self.btnSelectSource)
        self.pathsLayout.addLayout(self.hlayoutSource)

        # Destination folder
        self.hlayoutDestination = QtWidgets.QHBoxLayout()
        self.lblDestinationFolder = QtWidgets.QLabel("Destination:")
        self.lblDestinationFolder.setMinimumWidth(100)
        self.txtDestinationFolder = QtWidgets.QLineEdit()
        self.btnSelectDestination = QtWidgets.QPushButton()
        self.btnSelectDestination.setIcon(QtGui.QIcon.fromTheme("folder-open"))
        self.btnSelectDestination.setFixedWidth(40)
        self.hlayoutDestination.addWidget(self.lblDestinationFolder)
        self.hlayoutDestination.addWidget(self.txtDestinationFolder)
        self.hlayoutDestination.addWidget(self.btnSelectDestination)
        self.pathsLayout.addLayout(self.hlayoutDestination)

        self.mainLayout.addWidget(self.pathsGroup)

        # Formats section
        self.formatsGroup = QtWidgets.QGroupBox("Archive Formats")
        self.formatsGroup.setObjectName("formatsGroup")
        self.formatsLayout = QtWidgets.QGridLayout(self.formatsGroup)
        self.formatsLayout.setSpacing(10)

        # Create all checkboxes
        self.chkZip = QtWidgets.QCheckBox("ZIP")
        self.chkZip.setChecked(False)
        self.chkRar = QtWidgets.QCheckBox("RAR")
        self.chk7z = QtWidgets.QCheckBox("7Z")
        self.chkTar = QtWidgets.QCheckBox("TAR")

        self.chkGzip = QtWidgets.QCheckBox("GZIP")
        self.chkBzip2 = QtWidgets.QCheckBox("BZIP2")
        self.chkXz = QtWidgets.QCheckBox("XZ")
        self.chkWim = QtWidgets.QCheckBox("WIM")

        self.chkIso = QtWidgets.QCheckBox("ISO")
        self.chkCab = QtWidgets.QCheckBox("CAB")
        self.chkArj = QtWidgets.QCheckBox("ARJ")
        self.chkLzh = QtWidgets.QCheckBox("LZH")

        # Create subtle vertical separators
        def create_vertical_separator():
            separator = QtWidgets.QFrame()
            separator.setFrameShape(QtWidgets.QFrame.Shape.VLine)
            separator.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
            separator.setStyleSheet("""
                QFrame {
                    color: #3a3a3a;  /* Very subtle, almost invisible in dark mode */
                    width: 1px;
                }
            """)
            return separator

        # Add checkboxes to grid layout (3 rows, 4 columns)
        # Row 1
        self.formatsLayout.addWidget(self.chkZip, 0, 0)
        self.formatsLayout.addWidget(create_vertical_separator(), 0, 1)
        self.formatsLayout.addWidget(self.chkRar, 0, 2)
        self.formatsLayout.addWidget(create_vertical_separator(), 0, 3)
        self.formatsLayout.addWidget(self.chk7z, 0, 4)
        self.formatsLayout.addWidget(create_vertical_separator(), 0, 5)
        self.formatsLayout.addWidget(self.chkTar, 0, 6)

        # Row 2
        self.formatsLayout.addWidget(self.chkGzip, 1, 0)
        self.formatsLayout.addWidget(create_vertical_separator(), 1, 1)
        self.formatsLayout.addWidget(self.chkBzip2, 1, 2)
        self.formatsLayout.addWidget(create_vertical_separator(), 1, 3)
        self.formatsLayout.addWidget(self.chkXz, 1, 4)
        self.formatsLayout.addWidget(create_vertical_separator(), 1, 5)
        self.formatsLayout.addWidget(self.chkWim, 1, 6)

        # Row 3
        self.formatsLayout.addWidget(self.chkIso, 2, 0)
        self.formatsLayout.addWidget(create_vertical_separator(), 2, 1)
        self.formatsLayout.addWidget(self.chkCab, 2, 2)
        self.formatsLayout.addWidget(create_vertical_separator(), 2, 3)
        self.formatsLayout.addWidget(self.chkArj, 2, 4)
        self.formatsLayout.addWidget(create_vertical_separator(), 2, 5)
        self.formatsLayout.addWidget(self.chkLzh, 2, 6)

        # Configure layout
        self.formatsLayout.setColumnStretch(7, 1)  # Allow expansion
        self.formatsLayout.setHorizontalSpacing(5)  # Minimal spacing

        self.mainLayout.addWidget(self.formatsGroup)

        # Progress section
        self.progressGroup = QtWidgets.QGroupBox("Progress")
        self.progressLayout = QtWidgets.QVBoxLayout(self.progressGroup)
        self.progressLayout.setSpacing(10)

        # Progress bar and percentage
        self.progressBarLayout = QtWidgets.QHBoxLayout()
        self.progressBar = QtWidgets.QProgressBar()
        self.progressBar.setObjectName("progressBar")
        self.progressBar.setTextVisible(False)  # Hide text inside progress bar
        self.progressBarLayout.addWidget(self.progressBar, stretch=1)
        self.lblProgressValue = QtWidgets.QLabel("0%")
        self.lblProgressValue.setMinimumWidth(50)
        self.progressBarLayout.addWidget(self.lblProgressValue)
        self.progressLayout.addLayout(self.progressBarLayout)

        # Progress stats layout
        self.statsLayout = QtWidgets.QGridLayout()
        self.statsLayout.setSpacing(10)

        # Files processed
        self.lblFilesProcessed = QtWidgets.QLabel("Files processed:")
        self.lblFilesProcessedValue = QtWidgets.QLabel("0 / 0")
        self.statsLayout.addWidget(self.lblFilesProcessed, 0, 0)
        self.statsLayout.addWidget(self.lblFilesProcessedValue, 0, 1)

        # Data processed
        self.lblDataProcessed = QtWidgets.QLabel("Data processed:")
        self.lblDataProcessedValue = QtWidgets.QLabel("0 / 0 B")
        self.statsLayout.addWidget(self.lblDataProcessed, 1, 0)
        self.statsLayout.addWidget(self.lblDataProcessedValue, 1, 1)

        # ETA
        self.lblETA = QtWidgets.QLabel("Estimated time remaining:")
        self.lblETAValue = QtWidgets.QLabel("--:--")
        self.statsLayout.addWidget(self.lblETA, 2, 0)
        self.statsLayout.addWidget(self.lblETAValue, 2, 1)

        # Add stretch to push stats to the left
        self.statsLayout.setColumnStretch(2, 1)

        # Add stats layout to progress group
        self.progressLayout.addLayout(self.statsLayout)

        # Logs
        self.txtLogs = QtWidgets.QTextEdit()
        self.txtLogs.setObjectName("txtLogs")
        self.txtLogs.setReadOnly(True)
        self.txtLogs.setMinimumHeight(150)
        self.progressLayout.addWidget(self.txtLogs)

        self.mainLayout.addWidget(self.progressGroup)

        # Buttons section
        self.buttonsLayout = QtWidgets.QHBoxLayout()
        self.buttonsLayout.setSpacing(10)

        self.btnStartDecompression = QtWidgets.QPushButton("Start Extraction")
        self.btnStartDecompression.setObjectName("btnStartDecompression")
        self.btnStartDecompression.setMinimumWidth(120)
        self.btnStartDecompression.setStyleSheet("""
            QPushButton {
                background-color: #2ecc71;
                color: white;
                border: none;
                padding: 8px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #27ae60;
            }
            QPushButton:pressed {
                background-color: #219a52;
            }
        """)

        self.btnCancelDecompression = QtWidgets.QPushButton("Cancel")
        self.btnCancelDecompression.setObjectName("btnCancelDecompression")
        self.btnCancelDecompression.setMinimumWidth(100)
        self.btnCancelDecompression.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 8px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
            QPushButton:pressed {
                background-color: #a93226;
            }
        """)

        self.btnClearLogs = QtWidgets.QPushButton("Clear Logs")
        self.btnClearLogs.setObjectName("btnClearLogs")
        self.btnClearLogs.setMinimumWidth(100)
        self.btnClearLogs.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 8px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
            QPushButton:pressed {
                background-color: #2471a3;
            }
        """)

        self.buttonsLayout.addStretch()
        self.buttonsLayout.addWidget(self.btnClearLogs)
        self.buttonsLayout.addWidget(self.btnCancelDecompression)
        self.buttonsLayout.addWidget(self.btnStartDecompression)

        self.mainLayout.addLayout(self.buttonsLayout)

        # Set up menu bar
        self.menubar = QtWidgets.QMenuBar(Main)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))

        # File menu
        self.menuFile = self.menubar.addMenu("File")

        # New actions for File menu
        self.actionSelectInputDir = QtGui.QAction("Select Input Directory", Main)
        self.actionSelectInputDir.setText("Select Input Directory")

        self.actionSelectOutputDir = QtGui.QAction("Select Output Directory", Main)
        self.actionSelectOutputDir.setText("Select Output Directory")

        self.actionClearLogs = QtGui.QAction("Clear Logs", Main)
        self.actionClearLogs.setText("Clear Logs")

        # Existing actions for File menu
        self.actionOpenLogs = QtGui.QAction("Open Logs File", Main)
        self.actionOpenLogs.setText("Open Logs File")

        self.actionExit = QtGui.QAction("Exit", Main)
        self.actionExit.setText("Exit")

        # Add actions to File menu
        self.menuFile.addAction(self.actionSelectInputDir)
        self.menuFile.addAction(self.actionSelectOutputDir)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionClearLogs)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionOpenLogs)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)

        # View menu
        self.menuView = self.menubar.addMenu("View")
        self.actionToggleTheme = QtGui.QAction("Toggle Theme", Main)
        self.actionToggleTheme.setShortcut("Ctrl+T")
        self.menuView.addAction(self.actionToggleTheme)

        # About menu
        self.menuAbout = self.menubar.addMenu("About")

        # GitHub repository action
        self.actionOpenGitHub = QtGui.QAction("Open GitHub Repository", Main)
        self.actionOpenGitHub.setStatusTip("Open the project's GitHub repository")
        self.menuAbout.addAction(self.actionOpenGitHub)

        # Usage instructions action
        self.actionUsageInstructions = QtGui.QAction("Usage Instructions", Main)
        self.actionUsageInstructions.setStatusTip("View usage instructions for the application")
        self.menuAbout.addAction(self.actionUsageInstructions)

        # License action
        self.actionOpenLicense = QtGui.QAction("Open License", Main)
        self.actionOpenLicense.setStatusTip("View the application's license")
        self.menuAbout.addAction(self.actionOpenLicense)

        Main.setMenuBar(self.menubar)

        # Apply global stylesheet
        Main.setStyleSheet("""
            QMainWindow {
                background-color: #f5f6fa;
            }
            QGroupBox {
                font-weight: bold;
                border: 1px solid #bdc3c7;
                border-radius: 6px;
                margin-top: 6px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 3px 0 3px;
            }
            QLineEdit {
                padding: 5px;
                border: 1px solid #bdc3c7;
                border-radius: 4px;
                background-color: white;
            }
            QTextEdit {
                border: 1px solid #bdc3c7;
                border-radius: 4px;
                background-color: white;
            }
            QProgressBar {
                border: 1px solid #bdc3c7;
                border-radius: 4px;
                text-align: center;
                height: 20px;
            }
            QProgressBar::chunk {
                background-color: #2ecc71;
                border-radius: 3px;
            }
            QCheckBox {
                spacing: 8px;
            }
            QCheckBox::indicator {
                width: 18px;
                height: 18px;
            }
            QLabel {
                color: #2c3e50;
            }
            QLabel[class="stats"] {
                font-family: monospace;
            }
        """)

        self.retranslateUi(Main)
        QtCore.QMetaObject.connectSlotsByName(Main)

    def retranslateUi(self, Main):
        _translate = QtCore.QCoreApplication.translate
        Main.setWindowTitle(_translate("Main", "Multi Archive Extractor"))
        self.pathsGroup.setTitle(_translate("Main", "File Locations"))
        self.lblSourceFolder.setText(_translate("Main", "Source Folder:"))
        self.btnSelectSource.setText(_translate("Main", "..."))
        self.lblDestinationFolder.setText(_translate("Main", "Destination:"))
        self.btnSelectDestination.setText(_translate("Main", "..."))
        self.formatsGroup.setTitle(_translate("Main", "Archive Formats"))
        self.chkZip.setText(_translate("Main", "ZIP"))
        self.chkRar.setText(_translate("Main", "RAR"))
        self.chk7z.setText(_translate("Main", "7Z"))
        self.chkTar.setText(_translate("Main", "TAR"))
        self.chkGzip.setText(_translate("Main", "GZIP"))
        self.chkBzip2.setText(_translate("Main", "BZIP2"))
        self.chkXz.setText(_translate("Main", "XZ"))
        self.chkWim.setText(_translate("Main", "WIM"))
        self.chkIso.setText(_translate("Main", "ISO"))
        self.chkCab.setText(_translate("Main", "CAB"))
        self.chkArj.setText(_translate("Main", "ARJ"))
        self.chkLzh.setText(_translate("Main", "LZH"))
        self.progressGroup.setTitle(_translate("Main", "Progress"))
        self.lblFilesProcessed.setText(_translate("Main", "Files processed:"))
        self.lblFilesProcessedValue.setText(_translate("Main", "0 / 0"))
        self.lblDataProcessed.setText(_translate("Main", "Data processed:"))
        self.lblDataProcessedValue.setText(_translate("Main", "0 / 0 B"))
        self.lblETA.setText(_translate("Main", "Estimated time remaining:"))
        self.lblETAValue.setText(_translate("Main", "--:--"))
        self.btnStartDecompression.setText(_translate("Main", "Start Extraction"))
        self.btnCancelDecompression.setText(_translate("Main", "Cancel"))
        self.btnClearLogs.setText(_translate("Main", "Clear Logs"))
        self.menuFile.setTitle(_translate("Main", "File"))
        self.actionSelectInputDir.setText(_translate("Main", "Select Input Directory"))
        self.actionSelectOutputDir.setText(_translate("Main", "Select Output Directory"))
        self.actionClearLogs.setText(_translate("Main", "Clear Logs"))
        self.actionOpenLogs.setText(_translate("Main", "Open Logs File"))
        self.actionExit.setText(_translate("Main", "Exit"))
        self.menuView.setTitle(_translate("Main", "View"))
        self.actionToggleTheme.setText(_translate("Main", "Toggle Theme"))
        self.menuAbout.setTitle(_translate("Main", "About"))
        self.actionOpenGitHub.setText(_translate("Main", "Open GitHub Repository"))
        self.actionUsageInstructions.setText(_translate("Main", "Usage Instructions"))
        self.actionOpenLicense.setText(_translate("Main", "Open License"))
